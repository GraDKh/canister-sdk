use candid::types::{internal::TypeContainer, Type};

pub struct Idl {
    pub env: TypeContainer,
    pub actor: Type,
}

impl Idl {
    pub fn new(env: TypeContainer, actor: Type) -> Self {
        Self { env, actor }
    }

    pub fn merge(&mut self, other: &Self) {
        self.env = candid::types::internal::TypeContainer {
            env: self.env.env.merge(&other.env.env).unwrap().clone(),
        };

        match (&mut self.actor, &other.actor) {
            (Type::Class(ref class, box Type::Service(ref mut left)), Type::Service(ref right))
            | (Type::Service(ref mut left), Type::Class(ref class, box Type::Service(ref right))) =>
            {
                left.extend(right.clone());
                self.actor = Type::Class(class.to_vec(), Box::new(Type::Service(left.clone())));
            }
            (Type::Service(left), Type::Service(right)) => {
                left.extend(right.clone());
            }
            (l @ Type::Class(_, _), r @ Type::Class(_, _)) => {
                panic!("cannot merge two candid classes: self:\n{l:#?}\nother:\n{r:#?}")
            }
            (l, r) => {
                panic!(
                    "wrong candid types were generated by the macro: self:\n{l:#?}\nother:\n{r:#?}"
                )
            }
        }
    }
}
